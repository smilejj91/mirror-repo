<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>DISTRIBUTION</name>
          <defaultValue>tmax-unstable</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.7">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>TZ=Asia/Seoul
H 15 * * 1-5</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#set -e # error handling
#set -x # debugging

TARGETREPO=&quot;tmaxgooroom-3.0-unstable_main&quot;
ARCH=&quot;amd64&quot;
MISCDIR=&quot;/var/spool/aptly/misc&quot;


function download_tmax_package_list () {
  PACKAGES=( &quot;Packages&quot; &quot;Packages.xz&quot; &quot;Packages.gz&quot; )
  for PKGFILE in ${PACKAGES[@]}; do
    wget http://tos-repo.tmaxos.com/tgooroom/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/${PKGFILE}
    if [ $? -eq 0 ]; then
      case ${PKGFILE} in
        &quot;Packages&quot;)
          break
          ;;
        &quot;Packages.xz&quot;)
          xz -d Packages.xz
          break
          ;;
        &quot;Packages.gz&quot;)
          gunzip Packages.gz
          break
          ;;
      esac
    fi
  done

  # add new packages
  cat Packages | grep ^Package | sed &apos;s/Package: //g&apos; &gt; new-all-${COMPONENT}-package-list.txt

  if [ -e ${MISCDIR}/old-all-${COMPONENT}-package-list.txt ]; then
    diff ${MISCDIR}/old-all-${COMPONENT}-package-list.txt new-all-${COMPONENT}-package-list.txt | grep ^\&gt; | sed &apos;s/&gt; //g&apos; &gt;&gt; ${MISCDIR}/tmax-${COMPONENT}-package-list.txt

    # remove packages
    diff ${MISCDIR}/old-all-${COMPONENT}-package-list.txt new-all-${COMPONENT}-package-list.txt | grep ^\&lt; | sed &apos;s/&lt; //g&apos; &gt; remove-package-list.txt
    while read line || [ -n &quot;$line&quot; ]; do
      sed -i &quot;s/$line//g&quot; ${MISCDIR}/tmax-${COMPONENT}-package-list.txt
    done &lt; remove-package-list.txt

    rm ${MISCDIR}/old-all-${COMPONENT}-package-list.txt
  fi

  mv new-all-${COMPONENT}-package-list.txt ${MISCDIR}/old-all-${COMPONENT}-package-list.txt

  while read line || [ -n &quot;$line&quot; ]; do
    apt-get download -t=${DISTRIBUTION} $line
    apt-get source -t=${DISTRIBUTION} $line
  done &lt; ${MISCDIR}/tmax-${COMPONENT}-package-list.txt
  
  rename &apos;s/%3a/:/g&apos; *

  rm Packages
}

function download_package () {
  

  REMOVELIST=`ls -al /var/lib/apt/lists/ | grep ${DISTRIBUTION}_${COMPONENT}_binary-amd64_Packages.diff_Index | awk &apos;{print $9}&apos;`

  if [ -n &quot;${REMOVELIST}&quot; ]; then
    rm /var/lib/apt/lists/${REMOVELIST}
  fi 

  PACKAGELIST=`ls -al /var/lib/apt/lists/ | grep ${DISTRIBUTION}_${COMPONENT}_binary-amd64_Packages | awk &apos;{print $9}&apos;`

  mkdir -p ${DISTRIBUTION}/${COMPONENT}/
  
  cd ${DISTRIBUTION}/${COMPONENT}

  cp /var/lib/apt/lists/${PACKAGELIST} ${DISTRIBUTION}_${COMPONENT}-packages.txt

  cat ${DISTRIBUTION}_${COMPONENT}-packages.txt | grep ^Package | sed &apos;s/Package: //g&apos; &gt; ${DISTRIBUTION}_${COMPONENT}-package-only.txt

  cat ${DISTRIBUTION}_${COMPONENT}-packages.txt | grep ^Version | sed &apos;s/Version: //g&apos; &gt; ${DISTRIBUTION}_${COMPONENT}-version-only.txt

  paste -d= ${DISTRIBUTION}_${COMPONENT}-package-only.txt ${DISTRIBUTION}_${COMPONENT}-version-only.txt &gt; ${DISTRIBUTION}_${COMPONENT}-package-version.txt

  cat ${DISTRIBUTION}_${COMPONENT}-package-version.txt | grep =.*tmax[0-9]* &gt;&gt; ${DISTRIBUTION}_${COMPONENT}-package-version-repkg.txt
  cat ${DISTRIBUTION}_${COMPONENT}-package-version.txt | grep =.*tos[0-9]* &gt;&gt; ${DISTRIBUTION}_${COMPONENT}-package-version-repkg.txt

  echo -e &quot;repackaging list download start!&quot;

  while read line || [ -n &quot;$line&quot; ]; do
    apt-get download -t=${DISTRIBUTION} $line
    apt-get source -t=${DISTRIBUTION} $line
  done &lt; ${DISTRIBUTION}_${COMPONENT}-package-version-repkg.txt

  rename &apos;s/%3a/:/g&apos; *

  echo -e &quot;repackaging list download finish!&quot;
  
  download_tmax_package_list
}

function add_repo() {
  aptly repo add -config=&quot;/etc/aptly.conf&quot; ${TARGETREPO} ${DISTRIBUTION}
}

function remove_old_package() {
  dup=false

  for p in `aptly repo search ${TARGETREPO} | sort -V`
  do
    pkg=`echo $p | sed &apos;s,_.*,,&apos;`
    if test &quot;$pkg&quot; = &quot;$pkg_old&quot;
    then
      dup=true
    elif $dup
    then
      dup=false
      v_old=`echo $p_old | cut -d_ -f2`
      aptly repo remove ${TARGETREPO} &quot;$pkg_old (&lt;&lt; $v_old)&quot;
    fi
    p_old=&quot;$p&quot;
    pkg_old=&quot;$pkg&quot;
  done
  
  if test &quot;$pkg&quot; = &quot;$pkg_old&quot;
  then
    v_old=`echo $p_old | cut -d_ -f2`
    aptly repo remove ${TARGETREPO} &quot;$pkg_old (&lt;&lt; $v_old)&quot;
  fi
}


cat &gt;${DISTRIBUTION}.list&lt;&lt;EOF
deb http://tos-repo.tmaxos.com/tgooroom ${DISTRIBUTION} main contrib non-free
deb-src http://tos-repo.tmaxos.com/tgooroom ${DISTRIBUTION} main contrib non-free
EOF

cp ${DISTRIBUTION}.list /etc/apt/sources.list.d/${DISTRIBUTION}.list
apt-get clean
apt update

unlz4 -dm /var/lib/apt/lists/*.lz4
rm /var/lib/apt/lists/*.lz4

COMPONENT=&quot;main&quot;
download_package

COMPONENT=&quot;contrib&quot;
download_package

COMPONENT=&quot;non-free&quot;
download_package

cd ${WORKSPACE}

add_repo

COMPONENT=&quot;main&quot;
remove_old_package

rm /etc/apt/sources.list.d/${DISTRIBUTION}.list

apt-get clean
apt update</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.43">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>DISTRIBUTION_NAME=tmaxgooroom-3.0-unstable</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>4_create_snapshot_and_publish_switch</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.40">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@1.0.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>