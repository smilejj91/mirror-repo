<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>소스 패키지를 받을 수 없는 패키지들을 반영하기 위해 남겨둠</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>TEAM_NAME</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>OS1-1</string>
              <string>OS1-2</string>
              <string>OS1-3</string>
              <string>OS1-4</string>
              <string>OS2-1</string>
              <string>OS2-2</string>
              <string>OS2-3</string>
              <string>OS2-4</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.6.0">
          <name>DISTRIBUTION_NAME</name>
          <description>[Postfix] 
- &quot;-unstable&quot; : QA 검증안 된 패키지들이 모여있는 repo
- &quot;-stable&quot; : QA 검증된 패키지들이 모여있는 repo (연구원들은 추가 불가능)
- &quot;-proposed-updates&quot; : QA 검증안 된 update 패키지들 (주로 hotfix)이 모여있는 repo
- &quot;-updates&quot; : QA 검증된 update 패키지들이 모여있는 repo(연구원들은 추가 불가능)

- experimental : 연구소 test repo
- tmaxgooroom-3.0-proposed-updates : tmaxgooroom-3.0 update repo
- tmaxgooroom-5G-unstable : 5G 단말 OS
- tmaxgooroom-comwel-unstable : 근로복지공단 단말 OS
- tmaxgooroom-gs-unstable : GS 인증 데스크탑 OS
- tmaxgooroom-guest-unstable : 게스트 OS 공통
- tmaxgooroom-guestmois-unstable : 행정안전부 게스트 OS
- tmaxgooroom-iiac-unstable : 인천국제공항공사 단말 OS
- tmaxgooroom-kepco-unstable : 한전 단말 OS
- tmaxgooroom-mois-unstable : 행정안전부 단말 OS</description>
          <randomName>choice-parameter-2838316813927198</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1131.v8b_b_5eda_c328e">
              <script>import hudson.util.RemotingDiagnostics
import jenkins.model.Jenkins
 
String agent_name = &apos;repo&apos;
//groovy script you want executed on an agent
groovy_script = &apos;&apos;&apos;
def repo = &quot;aptly repo list --raw&quot;.execute() | &quot;grep -v tmaxgooroom-3.0-unstable&quot;.execute() | &quot;grep -v tmaxgooroom-3.0-updates&quot;.execute() | &quot;grep -e unstable -e experimental -e updates&quot;.execute()
println repo.text
&apos;&apos;&apos;.trim()

String result
Jenkins.instance.slaves.find { agent -&gt;
    agent.name == agent_name
}.with { agent -&gt;
    result = RemotingDiagnostics.executeGroovy(groovy_script, agent.channel).replaceAll(&quot;_main&quot;, &quot;&quot;)
}
return result.tokenize()</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1131.v8b_b_5eda_c328e">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>Z_add_deb_package_to_b2b_repo</projectName>
          <projectFullName>Z_add_deb_package_to_b2b_repo</projectFullName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <hudson.model.FileParameterDefinition>
          <name>packages.zip</name>
          <description>★★필독!!★★

1. 압축파일 형식: *.zip

2. 압축 파일 내용물 (아래사항 지키지 않을 시 패키지 업로드 실패)

- 패키지 (파일형식: *.deb)
-- 리패키징 패키지일 경우 마지막 버전명은 b2b 사업장에 맞는 revision 사용할 것 
-- ex1. tmaxgooroom-mois -&amp;gt; {package_name}_{origin version}+mois1.deb (1번 리패키징)
-- ex2. tmaxgooroom-guest -&amp;gt;{package_name}_{origin version}+guest2.deb (2번 리패키징)

- 단일 패키지에 대한 릴리즈 노트 (파일 형식: *.txt) 
-- OS 사용자에게 노출되기 전 작성하는 릴리즈 노트 (QA / CS에서 다듬을 예정이므로, 비교적 친절하고 상세히 적어주길 바람)
-- 릴리즈노트는 \\192.168.105.119\osqa\binary\TmaxOS\RND\tmax구름\release-note 폴더에 업로드 됨 (추후 수정 요청시 접속하여 수정 가능)</description>
        </hudson.model.FileParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.7">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

#set -e
#set -x

SNAPSHOT_NAME=&quot;$(date --iso-8601=seconds)-${TEAM_NAME}-${DISTRIBUTION_NAME}&quot;

DISTRIBUTION=${DISTRIBUTION_NAME}
COMPONENT=&quot;main&quot;
TARGETDIR=&quot;${WORKSPACE}/${DISTRIBUTION_NAME}&quot;
CONFIG=&quot;/etc/aptly.conf&quot;
BUSINESSNAME=`echo ${DISTRIBUTION} | cut -d &apos;-&apos; -f 2`

function add_repo() {
  aptly repo add -config=${CONFIG} ${DISTRIBUTION}_${COMPONENT} ${TARGETDIR}
}

function remove_old_package() {
  dup=false

  for p in `aptly repo search ${DISTRIBUTION}_${COMPONENT} | sort -V`
  do
    pkg=`echo $p | sed &apos;s,_.*,,&apos;`
    if test &quot;$pkg&quot; = &quot;$pkg_old&quot;
    then
      dup=true
    elif $dup
    then
      dup=false
      v_old=`echo $p_old | cut -d_ -f2`
      aptly repo remove ${DISTRIBUTION}_${COMPONENT} &quot;$pkg_old (&lt;&lt; $v_old)&quot;
    fi
    p_old=&quot;$p&quot;
    pkg_old=&quot;$pkg&quot;
  done
  
  if test &quot;$pkg&quot; = &quot;$pkg_old&quot;
  then
    v_old=`echo $p_old | cut -d_ -f2`
    aptly repo remove ${DISTRIBUTION}_${COMPONENT} &quot;$pkg_old (&lt;&lt; $v_old)&quot;
  fi
}

function package_version_check() {
  REVISION=`echo ${PACKAGE} | cut -d_ -f2 | rev | cut -d &apos;+&apos; -f 1 | rev | sed &apos;s/[0-9]*\$//g&apos; `
  
  # enable gooroom packge for tmaxgooroom-boot-protector
  if [[ ${PACKAGE} == *&quot;+&quot;* ]] &amp;&amp; [ ${REVISION} != ${BUSINESSNAME} ] &amp;&amp; [ ${REVISION} != &quot;grm&quot;]; then
    echo -e &quot;wrong package revision!&quot;
    exit 1
  fi
}

function send_release_note() {
  sshpass -p &apos;tmax123&apos; scp -o StrictHostKeyChecking=no -P 79 ${RELEASE_NOTE} root@192.168.10.125:/osqa_smb/binary/TmaxOS/RND/tmaxgooroom/release-note/${PACKAGE}_${TEAM_NAME}_release-note.txt
}

mkdir -p ${TARGETDIR}
mkdir -p ${TARGETDIR}_zip

if [ ! -e &quot;packages.zip&quot; ]; then
  echo -e &quot;packages.zip not found&quot;
  exit 1
fi

unzip packages.zip -d ${TARGETDIR}/

mv packages.zip ${TARGETDIR}_zip/${SNAPSHOT_NAME}.zip

RELEASE_NOTE=`find ${TARGETDIR} -name &quot;*.txt&quot;`
PACKAGE_FILE=`find ${TARGETDIR} -name &quot;*.deb&quot; | awk &apos;NR==1{print $1}&apos;`
PACKAGE=`basename ${PACKAGE_FILE} | sed &apos;s/\.deb//&apos;`

function check_package() {
  if [ -z ${PACKAGE_FILE} ]; then
    echo -e &quot;package not found&quot;
    exit 1
  fi

  for p in `find ${TARGETDIR} -name &quot;*.deb&quot;`
  do
 	PACKAGE=`basename $p | sed &apos;s/\.deb//&apos;`
    package_version_check  
  done
}

if [ -z ${RELEASE_NOTE} ]; then
  echo -e &quot;release note not found&quot;
  exit 1
fi

if [ ${DISTRIBUTION} != &quot;experimental&quot; ]; then
  check_package
fi

add_repo

remove_old_package

if [ ${DISTRIBUTION} != &quot;experimental&quot; ]; then
  send_release_note
fi

rm -rf ${TARGETDIR}/*</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.43">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>DISTRIBUTION_NAME=${DISTRIBUTION_NAME}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>4_create_snapshot_and_publish_switch</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.40">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@1.0.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>